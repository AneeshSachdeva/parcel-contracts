/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ParcelInterface extends utils.Interface {
  functions: {
    "addTokens(address,uint256)": FunctionFragment;
    "balanceOfNFTs()": FunctionFragment;
    "ethBalance()": FunctionFragment;
    "isCommunal()": FunctionFragment;
    "lock()": FunctionFragment;
    "makeCommunal()": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "open(bytes)": FunctionFragment;
    "sender()": FunctionFragment;
    "state()": FunctionFragment;
    "tokenBalanceOf(address)": FunctionFragment;
    "updateHashedSecret(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCommunal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeCommunal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "open", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHashedSecret",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCommunal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCommunal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHashedSecret",
    data: BytesLike
  ): Result;

  events: {
    "ParcelEmptied(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParcelEmptied"): EventFragment;
}

export type ParcelEmptiedEvent = TypedEvent<[string], { recipient: string }>;

export type ParcelEmptiedEventFilter = TypedEventFilter<ParcelEmptiedEvent>;

export interface Parcel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParcelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokens(
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfNFTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isCommunal(overrides?: CallOverrides): Promise<[boolean]>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeCommunal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tokenAddr: string; tokenId: BigNumber }>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sender(overrides?: CallOverrides): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[number]>;

    tokenBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateHashedSecret(
      newHashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokens(
    tokenAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfNFTs(overrides?: CallOverrides): Promise<BigNumber>;

  ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isCommunal(overrides?: CallOverrides): Promise<boolean>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeCommunal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { tokenAddr: string; tokenId: BigNumber }>;

  onERC721Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    secret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sender(overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<number>;

  tokenBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateHashedSecret(
    newHashedSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokens(
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isCommunal(overrides?: CallOverrides): Promise<boolean>;

    lock(overrides?: CallOverrides): Promise<void>;

    makeCommunal(overrides?: CallOverrides): Promise<void>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tokenAddr: string; tokenId: BigNumber }>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    open(secret: BytesLike, overrides?: CallOverrides): Promise<void>;

    sender(overrides?: CallOverrides): Promise<string>;

    state(overrides?: CallOverrides): Promise<number>;

    tokenBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateHashedSecret(
      newHashedSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ParcelEmptied(address)"(recipient?: null): ParcelEmptiedEventFilter;
    ParcelEmptied(recipient?: null): ParcelEmptiedEventFilter;
  };

  estimateGas: {
    addTokens(
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isCommunal(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeCommunal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateHashedSecret(
      newHashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokens(
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCommunal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeCommunal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      secret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateHashedSecret(
      newHashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
