/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ParcelV2Interface extends utils.Interface {
  functions: {
    "addEth(uint256)": FunctionFragment;
    "addNFT(uint256,address,uint256)": FunctionFragment;
    "addToken(uint256,address,uint256)": FunctionFragment;
    "newParcel(bytes32)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "parcelExists(uint256)": FunctionFragment;
    "parcelsFromAddr(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addNFT",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newParcel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parcelExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parcelsFromAddr",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newParcel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parcelExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parcelsFromAddr",
    data: BytesLike
  ): Result;

  events: {
    "ParcelCreated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParcelCreated"): EventFragment;
}

export type ParcelCreatedEvent = TypedEvent<[], {}>;

export type ParcelCreatedEventFilter = TypedEventFilter<ParcelCreatedEvent>;

export interface ParcelV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParcelV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEth(
      parcelId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNFT(
      parcelId: BigNumberish,
      nftAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      parcelId: BigNumberish,
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newParcel(
      hashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parcelExists(
      parcelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    parcelsFromAddr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addEth(
    parcelId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNFT(
    parcelId: BigNumberish,
    nftAddr: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    parcelId: BigNumberish,
    tokenAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newParcel(
    hashedSecret: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parcelExists(
    parcelId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parcelsFromAddr(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addEth(parcelId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addNFT(
      parcelId: BigNumberish,
      nftAddr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      parcelId: BigNumberish,
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    newParcel(
      hashedSecret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    parcelExists(
      parcelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parcelsFromAddr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ParcelCreated()"(): ParcelCreatedEventFilter;
    ParcelCreated(): ParcelCreatedEventFilter;
  };

  estimateGas: {
    addEth(
      parcelId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNFT(
      parcelId: BigNumberish,
      nftAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      parcelId: BigNumberish,
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newParcel(
      hashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parcelExists(
      parcelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parcelsFromAddr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEth(
      parcelId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNFT(
      parcelId: BigNumberish,
      nftAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      parcelId: BigNumberish,
      tokenAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newParcel(
      hashedSecret: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parcelExists(
      parcelId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parcelsFromAddr(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
